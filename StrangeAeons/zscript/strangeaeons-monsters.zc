// Roach
class RoachBase : AetheriusMonsterZSC
{
	private class<Inventory> LDLPreload, LDLToken, LDLCheck, MiscCheck, MiscCheck2, MiscCheck3, MiscCheck4;
	int check1;
	int healint1;
	int healint2;

	Default
	{
		//$Angled
		//$Color 12
		//$Category "Strange Aeons Monsters"
		Tag "Roach";
		Health 150;
		GibHealth 250;
		Radius 19;
		Height 48;
		Speed 8;
		PainChance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 96; // Fist attacks have a +50% chance of stunning an enemy
		Mass 200;
		BloodColor "DarkGreen";
		SeeSound "Roach/Sight";
		PainSound "Roach/Pain";
		DeathSound "Roach/Death";
		ActiveSound "Roach/Active";
		Obituary "%o was scalded by a Roach";
		Monster;
		+DontHarmClass
	}
	
	States
	{
		Spawn:
			ROAC A 6 RoachLook();
			Loop;

		SeeAlert:
			ROAC A 0 A_AlertMonsters();
			Goto See;

		See:
			ROAC B 0 A_Jump(32, "Stand");
			ROAC BBBCCCDDDEEE 2
			{
				if (levelbehavior > 0 && user_monsterlevel > 60) { bAVOIDMELEE = 1; }
				if (levelbehavior > 0 && user_monsterlevel > 90) { A_SetTics(1); }

				check1++;
				if (check1 >= 3) 
				{ 
					A_Chase(); 
					check1 = 0; 
				} 
				else 
				{ 
					A_Chase("Melee", null, CHF_NOPLAYACTIVE); 
				}
			}
			Loop;

		Stand:
			ROAC AAAAAAAAAAAA 3
			{
				if (levelbehavior > 0 && user_monsterlevel > 60) { bAVOIDMELEE = 1; }
				if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(1); }
				else if (levelbehavior > 0 && user_monsterlevel > 60) { A_SetTics(2); }

				A_FaceTarget();
				A_Chase("Melee", "Missile", CHF_NOPLAYACTIVE | CHF_DONTMOVE);
			}
			ROAC A 0 A_Jump(192, "Stand");
			Goto See+1;

		Melee:
		Missile:
			ROAC AAAAFF 3 
			{
				if (levelbehavior > 0 && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			ROAC G 6
			{
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior > 0 && user_monsterlevel > 60) { A_SetTics(5); }

				A_MonsterCrisisCheck();
				A_CrisisSpawnProjectile("RoachBall","RoachBallCrisis", 32.0, -4.0, 1.0); 
				A_CrisisSpawnProjectile("RoachBall","RoachBallCrisis", 32.0, 4.0, -1.0); 
			}
			Goto See;

		Pain:
			ROAC H 3;
			ROAC H 3 A_DVDSPain();
			Goto See;
		
		Pain.Fist:
			ROAC H 3;
			ROAC H 3 A_DVDSPain();
			ROAC HH 3;
			Goto See;
		
		Pain.Kick:
			ROAC H 3;
			ROAC H 3 A_DVDSPain();
			ROAC HHHH 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ROAC I 8 A_ScreamAndUnblock();
			ROAC JKL 6;
			ROAC M 0 A_Jump(18, 2);
			ROAC M -1;
			Loop;
			ROAC MMMMM 70;
			ROAC MMMMM 70;
			ROAC MMMMM 70;
			ROAC M -1 Thing_Raise(0);
			Wait;

		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ROAC I 4 A_XScream();
			ROAC NOP 6;
			ROAC Q 6 A_NoBlocking();
			ROAC RS 6;
			ROAC T -1;
			Stop;

		Raise:
			ROAC MLKJI 5;
			Goto See;

		Ice:
			"####" # 0 A_DVDSIceDeath(-2,0,1);
			ROAC H 5 A_GenericFreezeDeath;
			ROAC H 1 A_FreezeDeathChunks;
			wait;
	}

	void RoachLook()
	{
		if(Args[0] == 1)
			A_LookEx(LOF_NOSEESOUND, 0, 0, 0, 0, "See");
		else if(Args[0] > 1)
			A_LookEx(0, 0, 0, 0, 0, "SeeAlert");
		else
			A_Look();
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay(); //Call original in case of another override
		
		healint1 = random(9,11) - (Skill / 2);
		healint2 = healint1 * 7;
	}

	override void Tick()
	{
		super.tick(); //Call original in case of another override
	
		String nm = "LDLegendaryMonsterTransformed";
		LDLCheck = nm;

		// Heal every six tics
		int healamt = 0;
		int	healmax = User_MaxHP;
		if (health > 0)
		{
			//Console.Printf("\cyHealTimer1: %d / %d\c-, \cxHealTimer2: %d / %d\c-", level.maptime % healint1, healint1, level.maptime % healint2, healint2);
			if (health < User_MaxHP && level.maptime % healint1 == 0) 
			{
				healamt += randompick(1,2,2,2,2,2,2,2,2,3) + (user_monsterlevel / randompick(20,15,15,15,15,15,15,15,15,10));
			}
			if (health >= User_MaxHP && level.maptime % healint2 == 0) 
			{
				healmax = User_MaxHP * 2;
				healamt += randompick(0,0,1,1,1,1,2,2) + (user_monsterlevel / randompick(50,50,40,40,40,40,30,30));
			}
			if (CountInv(LDLCheck) && healamt > 0) healamt * (1.0 + (random(10,15) * 0.05));
			
			if (healamt > 0)
			{
				health += healamt;
				if (health > healmax) health = healmax;
			}
		}
	
		// Run away when low on health, get aggressive when healed up again
		int fleehealth = (User_MaxHP * 40) / 150;
		int nofleehealth = (User_MaxHP * 120) / 150;
		if (health <= (User_MaxHP * 0.26667) && !bFrightened) bFrightened = true;
		if (health >= (User_MaxHP * 0.8) && bFrightened) bFrightened = false;
	}
}

Class RoachBall : AetheriusProjectileZSC
{
	Default
	{
		Height 5;
		Radius 3;
		Speed 30;
		FastSpeed 60;
		DamageFunction (Random(5,8) * random(1,8));
		Decal "PlasmaScorchLower";
		Projectile;
		+RANDOMIZE
		RenderStyle "Add";
		Scale 0.6;
		Alpha 1.0;
		SeeSound "Roach/Fire";
		DeathSound "Roach/Hit";
	}
	
	States
	{
		Spawn:
			RCHB AAAABBBB 1 Bright A_SpawnItemEx("RoachBallTrail", -(Vel.X/1.2), -(Vel.Y/1.2), (Vel.Z/1.2*-1), (Vel.X/1.2), (Vel.Y/1.2), (Vel.Z/1.2), -Angle, SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEVELOCITY | SXF_CLIENTSIDE);
			Loop;
		Death:
			RCHB C 0 Bright A_Explode(5, 32, 0);
			RCHB CDEFG 3 Bright;
			Stop;
	}
}

Class RoachBallCrisis : RoachBall
{
	Default
	{
		DamageFunction ((Random(5,8) * random(1,8)) * CallACS("CrisisMultiplier"));
	}

	States
	{
		Spawn:
			RCHB AAAABBBB 1 Bright 
			{
				A_SpawnItemEx("RoachBallTrail", -(Vel.X/1.2), -(Vel.Y/1.2), (Vel.Z/1.2*-1), (Vel.X/1.2), (Vel.Y/1.2), (Vel.Z/1.2), -Angle, SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEVELOCITY | SXF_CLIENTSIDE);
				user_crisistimer += 1;
				if (user_crisistimer >= 2) 
				{ 
					A_GenerateCrisisParticle(); 
					user_crisistimer = 0;
				}
			}
			Loop;
		Death:
			RCHB C 0 Bright A_Explode(5, 32, 0);
			RCHB CDEFG 3 Bright;
			Stop;
	}
}

Class RoachBallTrail : Actor
{
	Default
	{
		Projectile;
		RenderStyle "Add";
		Alpha 0.5;
		Scale 0.6;
	}
	
	States
	{
		Spawn:
			RCHB AABB 2 Bright A_FadeOut(0.05);
			Loop;
	}
}

// Devil Imp
class Devil : AetheriusMonsterZSC 
{
	Default
	{
		//$Angled
		//$Color 12
		//$Category "Strange Aeons Monsters"
		obituary "%o was fried by a Devil.";
		hitobituary "%o was flayed by a Devil.";
		Tag "Devil Imp";
		health 60;
		radius 20;
		height 56;
		mass 120;
		speed 10;
		painchance 160;
		+DontHarmClass
		seesound "monster/dvlsit";
		painsound "monster/dvlpai";
		deathsound "monster/dvldth";
		activesound "monster/dvlact";
		MONSTER;
		+FLOORCLIP
	}

	states
	{
		Spawn:
			TRO2 AB 10 A_Look();
			loop;
		See:
			TRO2 AABBCCDD 3 
			{
				if (levelbehavior > 0 && user_monsterlevel > 60) { bAVOIDMELEE = 1; }
				if (levelbehavior > 0 && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(2); }
				A_Chase();
			}
			loop;
		Melee:
		Missile:
			TRO2 EF 6 
			{
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior > 0 && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			TRO2 G 4 
			{
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior > 0 && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_CrisisComboAttack("BelphegorBall", "BelphegorBallCrisis", 32, (12.5*random(1,8)), "imp/melee"); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_CrisisComboAttack("BaronOfHellBall", "BaronOfHellBallCrisis", 32, (random(10,15)*random(1,8)), "imp/melee"); }
				else if (levelbehavior > 0 && user_monsterlevel > 60) { A_CrisisComboAttack("HellKnightBall", "HellKnightBallCrisis", 32, (random(5,10)*random(1,8)), "imp/melee"); }
				else { A_CrisisComboAttack("DoomImpBall", "DoomImpBallCrisis", 32, (3*random(1,8)), "imp/melee"); }       
			}
			TRO2 B 2
			{
				if (levelbehavior > 0 && user_monsterlevel > 150) { A_SetTics(1); }
				A_FaceTarget();
			}
			TRO2 VW 6
			{
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior > 0 && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			TRO2 X 4
			{
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior > 0 && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_CrisisComboAttack("BelphegorBall", "BelphegorBallCrisis", 32, (12.5*random(1,8)), "imp/melee"); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_CrisisComboAttack("BaronOfHellBall", "BaronOfHellBallCrisis", 32, (random(10,15)*random(1,8)), "imp/melee"); }
				else if (levelbehavior > 0 && user_monsterlevel > 60) { A_CrisisComboAttack("HellKnightBall", "HellKnightBallCrisis", 32, (random(5,10)*random(1,8)), "imp/melee"); }
				else { A_CrisisComboAttack("DoomImpBall", "DoomImpBallCrisis", 32, (3*random(1,8)), "imp/melee"); }       
			}
			TRO2 E 0 A_Jump(200,9);
			TRO2 D 2
			{
				if (levelbehavior > 0 && user_monsterlevel > 150) { A_SetTics(1); }
				A_FaceTarget();
			}
			TRO2 EF 6
			{
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior > 0 && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			TRO2 G 4
			{
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior > 0 && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_CrisisComboAttack("BelphegorBall", "BelphegorBallCrisis", 32, (12.5*random(1,8)), "imp/melee"); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_CrisisComboAttack("BaronOfHellBall", "BaronOfHellBallCrisis", 32, (random(10,15)*random(1,8)), "imp/melee"); }
				else if (levelbehavior > 0 && user_monsterlevel > 60) { A_CrisisComboAttack("HellKnightBall", "HellKnightBallCrisis", 32, (random(5,10)*random(1,8)), "imp/melee"); }
				else { A_CrisisComboAttack("DoomImpBall", "DoomImpBallCrisis", 32, (3*random(1,8)), "imp/melee"); }       
			}
			TRO2 B 2
			{
				if (levelbehavior > 0 && user_monsterlevel > 150) { A_SetTics(1); }
				A_FaceTarget();
			}
			TRO2 VW 6
			{
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior > 0 && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			TRO2 X 4
			{
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior > 0 && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_CrisisComboAttack("BelphegorBall", "BelphegorBallCrisis", 32, (12.5*random(1,8)), "imp/melee"); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_CrisisComboAttack("BaronOfHellBall", "BaronOfHellBallCrisis", 32, (random(10,15)*random(1,8)), "imp/melee"); }
				else if (levelbehavior > 0 && user_monsterlevel > 60) { A_CrisisComboAttack("HellKnightBall", "HellKnightBallCrisis", 32, (random(5,10)*random(1,8)), "imp/melee"); }
				else { A_CrisisComboAttack("DoomImpBall", "DoomImpBallCrisis", 32, (3*random(1,8)), "imp/melee"); }       
			}
			TRO2 B 0
			{
				if (levelbehavior > 0 && user_monsterlevel > 180) { A_SetTics(0); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(random(0,1)); }
				else { A_SetTics(random(0,2)); }
			}
			goto See;

		Pain:
			TRO2 H 2;
			TRO2 H 2 A_DVDSPain();
			goto See;

		Pain.Fist:
			TRO2 H 2;
			TRO2 H 2 A_DVDSPain();
			TRO2 HH 2;
			goto See;

		Pain.Kick:
			TRO2 H 2;
			TRO2 H 2 A_DVDSPain();
			TRO2 HHHH 2;
			goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			TRO2 I 8;
			TRO2 J 8 A_Scream();
			TRO2 K 6;
			TRO2 L 6 A_NoBlocking();
			TRO2 M -1;
			stop;

		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			TRO2 N 5;
			TRO2 O 5 A_XScream();
			TRO2 P 5;
			TRO2 Q 5 A_NoBlocking();
			TRO2 RST 5;
			TRO2 U -1;
			stop;

		Raise:
			TRO2 ML 8;
			TRO2 KJI 6;
			goto See;

		Ice:
			"####" # 0 A_DVDSIceDeath(-2,0,1);
			TRO2 H 5 A_GenericFreezeDeath;
			TRO2 H 1 A_FreezeDeathChunks;
			wait;
	}
}

// Grell -- by NMN (w/DECORATE by Xaser, ZScript by Ghastly)

Class Grell : AetheriusMonsterZSC
{
	Default
	{
		//$Angled
		//$Color 12
		//$Category "Strange Aeons Monsters"
		Tag "Grell";
		health 300;
		radius 24;
		height 56;
		mass 400;
		speed 10;
		Obituary "%o was plagued by a grell.";
		painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Eldritch", 150;
		DamageFactor "Eldritch", 2.5;
		Damagefactor "Stomp", 2.5;
		Damagefactor "Trample", 2.5;
		DamageFactor "Melee", 2.5;
		DamageFactor "Fist", 2.5;
		DamageFactor "Kick", 2.5;
		DamageFactor "Gauntlets", 2.5;
		DamageFactor "Chainsaw", 2.5;
		DamageFactor "Sceptre", 2.5;
		seesound "grell/sight";
		painsound "grell/pain";
		deathsound "grell/death";
		activesound "grell/active";
		Monster;
		+FLOAT
		+NOGRAVITY
		+DONTHARMCLASS
		+DROPOFF
	}
	
	States
	{
		Spawn:
			GREL A 10 A_Look();
			Loop;

		See:
			GREL A 0
			{
				if (levelbehavior > 0 && user_monsterlevel > 60) { bAVOIDMELEE = 1; }
				A_SentinelBob();
			}
			GREL AAB 3 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior > 0 && user_monsterlevel > 60) { bAVOIDMELEE = 1; }

				if (levelbehavior > 0 && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(2); }

				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_Chase("Melee","Missile",CHF_FASTCHASE); A_FloatSetFChaseT(randompick(0,4)); } else { A_Chase(); }
				user_painfastchase = 0;
			}
			GREL B 0 
			{
				if (levelbehavior > 0 && user_monsterlevel > 60) { bAVOIDMELEE = 1; }
				A_SentinelBob();
			}
			GREL BCC 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior > 0 && user_monsterlevel > 60) { bAVOIDMELEE = 1; }

				if (levelbehavior > 0 && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior > 0 && user_monsterlevel > 120) { A_SetTics(2); }

				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_Chase("Melee","Missile",CHF_FASTCHASE); A_FloatSetFChaseT(randompick(0,4)); } else { A_Chase(); }
				user_painfastchase = 0;
			}
			Loop;
		Missile:
			TNT1 A 0 
			{
				A_PlaySound("grell/attack");
				user_painfastchase = 0;
			}
			GREL D 4 
			{
				A_FaceTarget();
			}
			GREL E 4 Bright
			{
				A_FaceTarget();
			}
			GREL F 4 Bright
			{
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisSpawnProjectile("GrellBall","GrellBallCrisis", 32, 0, 0);
			}
			Goto See;

		Pain:
			GREL G 3;
			GREL G 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			Goto See;

		Pain.Fist:
			GREL G 3;
			GREL G 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 5 * random(1,8);
			}
			GREL GG 3;
			Goto See;

		Pain.Kick:
			GREL G 3;
			GREL G 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 7 * random(1,8);
			}
			GREL GGGG 3;
			Goto See;

		Pain.Eldritch:
			GREL G 3;
			GREL G 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 14 * random(1,8);
			}
			GREL GGGGGGGG 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			GREL H 5;
			GREL I 0 A_NoBlocking();
			GREL I -1 A_Scream();

		Crash:
			GREL J 4 A_PlaySound("grell/thud", CHAN_AUTO);
			GREL K 4;
			GREL LM 4 A_SetFloorClip();
			GREL N -1;
			Stop;

		Raise:
			GREL M 5 A_UnSetFloorClip();
			GREL LKJIH 5;
			Goto See;

		Ice:
			"####" # 0 A_DVDSIceDeath(-2,0,1);
			GREL G 5 A_GenericFreezeDeath;
			GREL G 1 A_FreezeDeathChunks;
			wait;
	}
}

Class GrellBall : AetheriusEffectProjectile
{
	Default
	{
		Radius 8;
		Height 16;
		Speed 15;
		DamageFunction(4 * random(1,8));
		Renderstyle "Add";
		DamageType "Eldritch";
		DeathSound "grell/projhit";
		Alpha 0.67;
		Projectile;
		+HitTracer
	}
	
	States
	{
		Spawn:
			FVUL AAABBB 1 Bright A_SpawnItemEx("BarbTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
			loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE)
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict > 0)
					{
						user_random = random(1,3);
						if (user_random == 1) { ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(140,280)); } // Deceleratle for 4-8 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 2) { ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,280)); } // Poison for 4-8 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 3) 
						{ 
							ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(70,140)); // Deceleratle for 2-4 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
							ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,140)); // Poison for 2-4 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			FVUL CDEF 4 Bright;
			stop;
	}
}

Class GrellBallCrisis : GrellBall
{
	Default
	{
		Radius 8;
		Height 16;
		Speed 15;
		DamageFunction ((4 * random(1,8)) * CallACS("CrisisMultiplier"));
		Renderstyle "Add";
		DeathSound "grell/projhit";
		Alpha 0.67;
		Projectile;
		+HitTracer
	}
	
	States
	{
		Spawn:
			FVUL AAABBB 1 Bright
			{
				A_SpawnItemEx("BarbTrail",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
				A_GenerateCrisisParticle();
			}
			loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE)
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict > 0)
					{
						user_random = random(1,3);
						if (user_random == 1) { ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(140,280)*CallACS("CrisisMultiplier",5)); } // Deceleratle for 4-8 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 2) { ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,280)*CallACS("CrisisMultiplier",5)); } // Poison for 4-8 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 3) 
						{ 
							ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(70,140)*CallACS("CrisisMultiplier",5)); // Deceleratle for 2-4 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
							ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,140)*CallACS("CrisisMultiplier",5)); // Poison for 2-4 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			FVUL CDEF 4 Bright;
			stop;
	}
}

Class Barbtrail : Actor
{
	Default
	{
		Radius 0;
		Height 1;
		RENDERSTYLE "ADD";
		ALPHA 0.75;
		PROJECTILE;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 Bright;
			SSFX ABCDEFG 2 Bright;
			Stop;
	}
}
